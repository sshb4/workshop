generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Teacher {
  id                String             @id @default(cuid())
  subdomain         String             @unique
  name              String
  email             String             @unique
  passwordHash      String             @map("password_hash")
  title             String?
  bio               String?
  hourlyRate        Float?             @map("hourly_rate")
  profileImage      String?            @map("profile_image")
  favicon           String?
  phone             String?
  colorScheme       String             @default("default") @map("color_scheme")
  emailVerified     DateTime?          @map("email_verified")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  accounts          Account[]
  availabilitySlots AvailabilitySlot[]
  bookings          Booking[]
  sessions          Session[]

  @@map("teachers")
}

model Account {
  id                String  @id @default(cuid())
  teacherId         String  @map("teacher_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  teacher           Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  teacherId    String   @map("teacher_id")
  expires      DateTime
  teacher      Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AvailabilitySlot {
  id          String    @id @default(cuid())
  teacherId   String    @map("teacher_id")
  title       String?   // Optional title like "Regular Hours" or "Holiday Schedule"
  startDate   DateTime  @map("start_date") // When this availability period starts
  endDate     DateTime? @map("end_date")   // When it ends (null = ongoing)
  dayOfWeek   Int       @map("day_of_week") // 0=Sunday, 1=Monday, etc.
  startTime   String    @map("start_time") // "09:00"
  endTime     String    @map("end_time")   // "17:00"
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  teacher     Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId, startDate, endDate])
  @@map("availability_slots")
}

model Booking {
  id            String   @id @default(cuid())
  teacherId     String   @map("teacher_id")
  studentName   String   @map("student_name")
  studentEmail  String   @map("student_email")
  studentPhone  String   @map("student_phone")
  bookingDate   DateTime @map("booking_date")
  startTime     String   @map("start_time")
  endTime       String   @map("end_time")
  amountPaid    Float    @map("amount_paid")
  paymentStatus String   @default("pending") @map("payment_status")
  paymentId     String?  @map("payment_id")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  teacher       Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId, bookingDate])
  @@map("bookings")
}
